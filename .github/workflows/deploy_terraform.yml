name: CI/CD to AWS EC2

on:
  push:
    branches:
      - terraform

jobs:
  docker:
    name: Build & Push Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Install linters
        run: |
          npm install --save-dev stylelint stylelint-config-standard htmlhint

      - name: Create Stylelint config
        run: |
          cat <<EOF > .stylelintrc.json
          {
            "extends": "stylelint-config-standard"
          }
          EOF

      - name: Create HTMLHint config
        run: |
          cat <<EOF > .htmlhintrc
          {
            "tagname-lowercase": true,
            "attr-lowercase": true,
            "attr-value-double-quotes": true,
            "doctype-first": true,
            "tag-pair": true,
            "spec-char-escape": true,
            "id-unique": true,
            "src-not-empty": true
          }
          EOF

      - name: Run HTMLHint
        run: npx htmlhint "**/*.html" || true

      - name: Run Stylelint
        run: npx stylelint "**/*.css" || true

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker build -t bulakh/lab1bulakh:latest .
          docker push bulakh/lab1bulakh:latest
        
  terraform:
    name: Terraform Provision
    needs: docker
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION:            eu-north-1

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terminate existing instances
        run: |
          INSTANCES=$(aws ec2 describe-instances \
            --filters Name=tag:Name,Values=terraform-demo-instance \
            --query 'Reservations[].Instances[].InstanceId' --output text)
          if [ -n "$INSTANCES" ]; then
            echo "Terminating existing instances: $INSTANCES"
            aws ec2 terminate-instances --instance-ids $INSTANCES
            aws ec2 wait instance-terminated --instance-ids $INSTANCES
          else
            echo "No instances to terminate."
          fi

      - name: Terraform Init
        run: terraform init

      - name: Import Security Group
        run: |
          SG_ID=$(aws ec2 describe-security-groups \
            --filters Name=group-name,Values=web-sg \
            --query 'SecurityGroups[0].GroupId' --output text)
          terraform import aws_security_group.web_sg $SG_ID || true

      - name: Mark instance for recreation
        run: |
          if terraform state list | grep -q aws_instance.app; then
             terraform taint aws_instance.app
          else
             echo "No aws_instance.app in state; skip taint"
           fi

      - name: Import SSH Key Pair
        run: terraform import aws_key_pair.terraform_key terraform-demo || true
        working-directory: terraform
         
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Output Instance IP
        run: |
          echo "App URL: http://$(terraform output -raw instance_ip)"
      
